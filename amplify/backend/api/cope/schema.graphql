# Example types
# type Task
#   @model
#   @auth(
#     rules: [
#       { allow: groups, groups: ["Managers"], queries: null, mutations: [create, update, delete] }
#       { allow: groups, groups: ["Employees"], queries: [get, list], mutations: null }
#     ]
#   ) {
#   id: ID!
#   title: String!
#   description: String
#   status: String
# }
# type PrivateNote @model @auth(rules: [{ allow: owner }]) {
#   id: ID!
#   content: String!
# }

enum NodeType {
    # Human #####################################

    "H_AUTHOR description here in parentheses (http://spec.graphql.org/draft/#sec-Descriptions)"
    H_AUTHOR 
    H_EMPLOYEE
    H_HISTORICAL_FIGURE

    # Assets/leaves #############################

    A_IMAGE
    A_VIDEO
    A_AUDIO
    A_PDF
    A_HEADLINE_140
    A_TEXT_MD

    # Groupings/branches ########################

    G_PAGE # findable by router/deeplink
    G_APPLICATION
    G_COLLECTION # Unordered
    G_SERIES # Ordered/linked list
    G_LIST # Ordered/sortable

    # Deprecated ################################
    N_DEPRECATED @deprecated(reason: "reason is `markdown` _friendly_!") 
}

# for local secondary index (LSI/@key)
enum CategoryType {
    HUMAN
    ASSET
    GROUP
}

enum EdgeType {
    # Human to Human
    WORKED_WITH
    # Human to Asset
    CREATED_BY
    # Asset to Asset
    COMPOSED_WITH
    # Group to Group
    COMPONENT_OF
    # Group to Asset
    CONTAINS
    # Human to Group
    MEMBER_OF
    AUTHOR_OF
}

enum Status {
    PROVISIONAL
    UNDER_REVIEW
    PUBLIC
    EDITED
}

type Edge 
    @model 
{
    id                      : ID!
    type                    : EdgeType!
    Nodes                   : [NodeEdge]    @connection (keyName: "nodeEdgeByEdgeIndex", fields: ["id"])
}

type Node 
    @model
{
    id                      : ID!
    name                    : String!
    content                 : String
    edges                   : [NodeEdge]    @connection (keyName: "nodeEdgeByNodeIndex", fields: ["id"])
}

type Meta
    @model
    #@auth  (rules: [{ allow: public, operations: [read] }])
    @key   (name: "byStatusAndDate", fields: ["type", "status", "createdAt"], queryField: "nodesByType" ) 
    #       name: GSI Index Name,    fields: [partition key, sort key, ... ], queryField: GraphQL query name
{
    id                      : ID!
    status                  : Status
    type                    : NodeType!
    category                : CategoryType!
    createdAt               : AWSDateTime!
    updated_at              : AWSDateTime
    deleted_at              : AWSDateTime
    published               : Node
    draft                   : Node
    #draft                   : Node          @auth (rules: [
    #                            { 
    #                                allow: private, 
    #                                provider: userPools, 
    #                                operations: [create, read, update, delete] 
    #                            }
    #                        ])
}

#type PrivateLink
#    @model
#{

#}

type NodeEdge
    @model (queries: null)
    @key   (name: "nodeEdgeByEdgeIndex", fields: ["edge_id", "node_id"])
    @key   (name: "nodeEdgeByNodeIndex", fields: ["node_id", "edge_id"]) 
{
    id                      : ID!
    edge_id                 : ID!
    node_id                 : ID!
    edge                    : Edge!         @connection (fields: ["edge_id"])
    node                    : Node!         @connection (fields: ["node_id"])
}