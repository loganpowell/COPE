enum NodeType {
  R_ACCOUNT
  H_AUTHOR
  H_TEAM
  A_ARTICLE
  A_PAGE
  A_APPLICATION
  A_GEM
  A_COURSE
  S_ACS
  S_DECENNIAL
  S_CBP
  V_1990
  V_2000
  V_2010
  V_2020
  C_COURSES
  C_SERIES
  C_LIST
}

enum NodeStatus {
  DRAFT
  REVIEWED
  PUBLISHED
  EDITED
  DELETED
}

enum EdgeType {
  AUTHORED
  HAS_NEXT
  HAS_PREVIOUS
  HAS_PART
  HAS_CHILD
}

enum AssetType {
  """
  A [description](http://spec.graphql.org/June2018/#sec-Descriptions), 
  here in parentheses, is `markdown` friendly!
  """
  DEPRECATED @deprecated(reason: "the reason is _also_ `markdown` friendly!")
  A_IMAGE
  A_OG_IMAGE
  A_OG_AUDIO
  A_OG_VIDEO
  A_VIDEO
  A_AUDIO
  T_OG_TITLE
  T_OG_DESCRIPTION
  T_OG_TYPE
  T_LEDE
  T_BODY
  M_DATA
  M_MAP
  M_VIZ
  M_API
  F_IMAGE
  F_AUDIO
  F_VIDEO
  F_PDF
  F_KML
  F_SHP
  F_CSV
}

interface Resource {
  id: ID!
  node_id: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  type: AssetType!
  name: String!
  index: Int
  owner: String
  content: String
  editors: [String]
}

type Asset implements Resource 
    @model 
    @auth(rules: [
        {allow: owner, ownerField: "owner", identityClaim: "email"}, 
        {allow: owner, operations: [read, update], ownerField: "editors", identityClaim: "email"}, 
        {allow: groups, groups: ["Admins", "Editors"]}, 
        {allow: groups, operations: [read], groups: ["Viewers"]}, 
        {allow: public, operations: [read]}
    ]) 
{
  id: ID! @primaryKey
  node_id: ID! @index(name: "Assets_by_node", queryField: "assetsByNode")
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  type: AssetType! @index(name: "Assets_by_type", queryField: "assetsByType", sortKeyFields: ["createdAt"])
  name: String!
  index: Int
  owner: String @index(name: "Assets_by_owner_type", queryField: "assetsByOwnerType", sortKeyFields: ["type", "createdAt"])
  content: String
  editors: [String]
}

type AssetPr implements Resource 
    @model 
    @auth(rules: [
        {allow: owner, ownerField: "owner", identityClaim: "email"}, 
        {allow: owner, operations: [read, update], ownerField: "editors", identityClaim: "email"}, 
        {allow: groups, groups: ["Admins", "Editors"]}
    ]) 
{
  id: ID! @primaryKey
  node_id: ID! @index(name: "AssetsPr_by_node", queryField: "assetsPrByNode")
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  type: AssetType! @index(name: "AssetsPr_by_type", queryField: "assetsPrByType", sortKeyFields: ["createdAt"])
  name: String!
  index: Int
  owner: String @index(name: "AssetsPr_by_owner_type", queryField: "assetsPrByOwnerType", sortKeyFields: ["type", "createdAt"])
  content: String
  editors: [String]
}

type Node 
    @model 
    @auth(rules: [
        {allow: owner, ownerField: "owner", identityClaim: "email"}, 
        {allow: groups, groups: ["Admins", "Editors"]}, 
        {allow: groups, operations: [read], groups: ["Viewers"]}, 
        {allow: public, operations: [read]}
    ]) 
{
  id: ID! @primaryKey
  status: NodeStatus! @index(name: "Nodes_by_status_type_createdAt", queryField: "nodesByStatusType", sortKeyFields: ["type", "createdAt"])
  type: NodeType!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: String @index(name: "Nodes_by_owner_status_createdAt", queryField: "nodesByOwnerStatus", sortKeyFields: ["status", "createdAt"]) @index(name: "Nodes_by_owner_type_createdAt", queryField: "nodesByOwnerType", sortKeyFields: ["type", "createdAt"])
  assets: [Asset] @hasMany(indexName: "Assets_by_node", fields: ["id"])
  assetsPr: [AssetPr] @hasMany(indexName: "AssetsPr_by_node", fields: ["id"])
  edges: [EdgeNode] @hasMany(indexName: "EdgeNodes_by_node", fields: ["id"])
}

type Edge 
    @model 
    @auth(rules: [
        {allow: owner, ownerField: "owner", identityClaim: "email"}, 
        {allow: groups, groups: ["Admins", "Editors"]}, 
        {allow: groups, operations: [read], groups: ["Viewers"]}, 
        {allow: public, operations: [read]}
    ]) 
{
  id: ID! @primaryKey
  type: EdgeType! @index(name: "Edges_by_type", queryField: "edgesByType", sortKeyFields: ["createdAt"])
  createdAt: AWSDateTime!
  owner: String
  weight: Int
  nodes: [EdgeNode] @hasMany(indexName: "EdgeNodes_by_edge", fields: ["id"])
}

type EdgeNode 
    @model(queries: null) 
    @auth(rules: [
        {allow: owner, ownerField: "owner", identityClaim: "email"}, 
        {allow: groups, groups: ["Admins", "Editors"]}, 
        {allow: groups, operations: [read], groups: ["Viewers"]}, 
        {allow: public, operations: [read]}
    ]) 
{
  id: ID!
  edge_id: ID! @index(name: "EdgeNodes_by_edge", sortKeyFields: ["node_id"])
  node_id: ID! @index(name: "EdgeNodes_by_node", sortKeyFields: ["edge_id"])
  edge: Edge! @belongsTo(fields: ["edge_id"])
  node: Node! @belongsTo(fields: ["node_id"])
  owner: String
}
