# Example types
# type Task
#   @model
#   @auth(
#     rules: [
#       { allow: groups, groups: ["Managers"], queries: null, mutations: [create, update, delete] }
#       { allow: groups, groups: ["Employees"], queries: [get, list], mutations: null }
#     ]
#   ) {
#   id: ID!
#   title: String!
#   description: String
#   status: String
# }
# type PrivateNote @model @auth(rules: [{ allow: owner }]) {
#   id: ID!
#   content: String!
# }

enum NodeType {
    # Human #####################################

    H_AUTHOR 
    H_EMPLOYEE
    H_HISTORICAL_FIGURE

    # Assets/leaves #############################

    A_IMAGE
    A_VIDEO
    A_AUDIO
    A_FILE_PDF
    A_HEADLINE_140
    A_TEXT_MD

    # Collections/Groupings/branches ############

    G_PAGE # findable by router/deeplink
    G_APPLICATION
    G_COLLECTION # Unordered
    #G_COURSE
    G_SERIES # Ordered/linked list
    G_LIST # Ordered/sortable

    # Documentation #############################
    """
    A [description](http://spec.graphql.org/draft/#sec-Descriptions), 
    here in parentheses, is `markdown` friendly!
    """
    N_DEPRECATED @deprecated(reason: "reason is _also_ `markdown` friendly!") 
}

# for local secondary index (LSI/@key)
enum CategoryType {
    HUMAN
    ASSET
    GROUP
}

enum EdgeType {
    # Human to Human
    WORKED_WITH
    # Human to Asset
    CREATED_BY
    # Asset to Asset
    COMPOSED_WITH 
    SIBLING_OF
    NEXT_TO # linked list
    # Group to Group
    COMPONENT_OF
    # Group to Asset
    CONTAINS
    # Human to Group
    MEMBER_OF
    AUTHOR_OF
}

enum Status {
    PROVISIONAL
    UNDER_REVIEW
    PUBLIC
    EDITED
}

interface Property {
    id                      : ID!
    name                    : String!
    content                 : String
}

type Published implements Property 
    @model (queries: null)
    @key (name: "Published_by_node", fields: ["node_id"])
{
    id                      : ID!
    node_id                 : ID!
    name                    : String!
    content                 : String
}

type Protected  implements Property
    @model (queries: null)
    @key (name: "Protected_by_node", fields: ["node_id"])
{
    id                      : ID!
    node_id                 : ID! 
    name                    : String!
    content                 : String
}

type Node
    @model
    @auth (rules: [{ allow: owner }, { allow: public, operations: [ read ]}])
    @key (
        # name: GSI Index Name,    
        name: "Nodes_by_type_status_createdAt", 
        # fields: [partition key, sort key, ... ], 
        fields: ["type", "status", "createdAt"], 
        # queryField: GraphQL query name
        queryField: "nodesByTypeStatusCreatedAt" 
    )
{
    id                      : ID!
    status                  : Status!
    type                    : NodeType!
    createdAt               : AWSDateTime!  # automatically associated
    #owner                   : String!      # automatically associated
    category                : CategoryType
    updated_at              : AWSDateTime
    deleted_at              : AWSDateTime
    editors                 : [ String ]
    published               : [ Published ]     @connection (keyName: "Published_by_node", fields: ["id"])
    # https://docs.amplify.aws/cli/graphql-transformer/auth#field-level-authorization
    protected               : [ Protected ]     @connection (keyName: "Protected_by_node", fields: ["id"])
                                                @auth (rules: [
                                                    { 
                                                        allow: owner
                                                        ## DEFAULTS ##
                                                        # ownerField: "owner", # defaults to using the 'owner' field
                                                        # provider: userPools, # defaults to using userPools
                                                        # operations: [create, update, delete, read] # defaults to all operations
                                                    },
                                                    {
                                                        allow: owner,
                                                        ownerField: "editors",
                                                        operations: [ update, read ]
                                                    }
                                                ])
    edges                   : [ NodeEdge ]      @connection (keyName: "NodeEdges_by_node", fields: ["id"])
}

type Edge 
    @model
{
    id                      : ID!
    type                    : EdgeType!
    weight                  : Int
    Nodes                   : [ NodeEdge ]      @connection (keyName: "NodeEdges_by_edge", fields: ["id"])
}

type NodeEdge
    @model (queries: null)
    @key   (name: "NodeEdges_by_edge", fields: ["edge_id", "node_id"])
    @key   (name: "NodeEdges_by_node", fields: ["node_id", "edge_id"]) 
{
    id                      : ID!
    edge_id                 : ID!
    node_id                 : ID!
    edge                    : Edge!             @connection (fields: ["edge_id"])
    node                    : Node!             @connection (fields: ["node_id"])
}