
enum AssetType {
    # Documentation #############################
    """
    A [description](http://spec.graphql.org/_Asset/#sec-Descriptions), 
    here in parentheses, is `markdown` friendly!
    """
    DEPRECATED @deprecated(reason: "the reason is _also_ `markdown` friendly!") 

    # Traditional Assets ##############################
    A_IMAGE
    A_VIDEO
    A_AUDIO

    # Text #######################################
    T_BIO
    T_HEADLINE_140
    T_TITLE
    T_LEDE
    T_SUMMARY
    T_BODY

    # Links ######################################
    L_REFERENCE

    # Files ######################################
    F_PDF
}


enum NodeType {
    # Person #####################################
    PER_PERSON
    PER_AUTHOR
    PER_EMPLOYEE
    PER_HISTORICAL

    # Geographic Hierarchy #######################
    # summary level = 040 (State)
    GEO_STATE_01 
    GEO_STATE_02
    # ...

    # Thing ######################################
    A_LESSON
    A_ARTICLE
    A_PAGE # findable by router/deeplink
    A_APPLICATION

    # Collections/Groupings/branches #############
    GR_COURSE
    GR_SERIES # Ordered/linked list
    GR_LIST # Ordered/sortable

}

enum Status {
    DRAFT
    REVIEWED
    PUBLISHED
    EDITED
    DELETED
}

enum EdgeType {
    # Human to Human
    WORKED_WITH
    # Human to Group
    HAS_MEMBER
    # Human to Asset
    AUTHORED
    # Asset to Asset
    HAS_CHILD
    IS_BEFORE # linked list
    # Asset to Group
    HAS_PART
}


interface Resource {
    id              : ID!
    node_id         : ID!
    createdAt       : AWSDateTime! 
    type            : AssetType!
    name            : String!
    content         : String
}

# Assets are sub-atomic, i.e., they are not - by themselves
# - useful, but rather are combined into a Node, which is.
#   Nodes are the atomic unit of the system. If an Asset
#   (e.g., an image of a person) is needed for a different
#   use case than the Node that holds it (e.g., Node:Bio =
#   [ image, name, contact ]), then the Asset should be
#   copied to a new Node (e.g., Node:Author = [ image, name,
#   specialization_tags ])

type Asset implements Resource 
    @model
    @auth (rules: [
        { allow: owner                                                                       },
        { allow: groups, operations: [ read, update, delete ], groups: ["Admins", "Editors"] },
        { allow: groups, operations: [ read                 ], groups: ["Viewers"]           },
        { allow: public, operations: [ read                 ]                                }
    ])
    #@key (
    #    name: "Assets_by_type",
    #    fields: ["type", "createdAt"]
    #    queryField: "AssetsByType"
    #)
    @key (
        name: "Assets_by_node"
        fields: ["node_id", "createdAt"]
        queryField: "assetsByNode"
    )
    @key (
        name: "Assets_by_type_name"
        fields: ["type", "name", "createdAt"]
        queryField: "assetsByTypeName"
    )
{
    id              : ID!
    node_id         : ID!
    createdAt       : AWSDateTime!
    type            : AssetType!
    name            : String!
    content         : String
}

type _Asset implements Resource
    @auth (rules: [
        { allow: owner                                                                       },
        { allow: groups, operations: [ read, update, delete ], groups: ["Admins", "Editors"] },
        #{ allow: owner,  operations: [ read, update, delete ], ownerField: "editors",         }
    ])
    @model (queries: null)
    @key ( name: "_Assets_by_node", fields: ["node_id"] )
{
    id              : ID!
    node_id         : ID! 
    createdAt       : AWSDateTime!
    type            : AssetType!
    name            : String!
    content         : String
    #editors         : [ String ]
}

################################################################################
################################# NODES ########################################
################################################################################

# NOTES:
# https://docs.amplify.aws/cli/graphql-transformer/key#designing-data-models-using-key
# https://www.alexdebrie.com/posts/dynamodb-one-to-many/#composite-primary-key--the-query-api-action
# https://docs.amplify.aws/cli/graphql-transformer/auth#field-level-authorization
type Node
    @model
    @auth (rules: [
        { allow: owner                                                                       },
        { allow: groups, operations: [ read, update, delete ], groups: ["Admins", "Editors"] },
        { allow: groups, operations: [ read                 ], groups: ["Viewers"]           },
        { allow: public, operations: [ read                 ]                                }
    ])
    @key (
        name: "Nodes_by_type_status_createdAt",     # name: GSI Index Name 
        fields: ["type", "status", "createdAt"],    # type = partition key | status#createdAt = composite sort key
        queryField: "nodesByTypeStatus"             # GraphQL query name
    )
{
    id              : ID!
    status          : Status!
    type            : NodeType!
    createdAt       : AWSDateTime!
    updatedAt       : AWSDateTime!                  # automatically associated
    #owner          : String!                       # automatically associated
    assets          : [ Asset ]         @connection (keyName: "Assets_by_node", fields: ["id"])
    _assets         : [ _Asset ]        @connection (keyName: "_Assets_by_node", fields: ["id"])
    edges           : [ EdgeNode ]      @connection (keyName: "EdgeNodes_by_node", fields: ["id"])
}


type Edge 
    @model
    @auth (rules: [
        { allow: owner                                                                       },
        { allow: groups, operations: [ read, update, delete ], groups: ["Admins", "Editors"] },
        { allow: groups, operations: [ read                 ], groups: ["Viewers"]           },
        { allow: public, operations: [ read                 ]                                }
    ])
    @key (
        name: "Edges_by_type_weight", 
        fields: ["type", "weight", "createdAt"]
        queryField: "edgesByTypeWeight"
    )
{
    id              : ID!
    type            : EdgeType!
    createdAt       : AWSDateTime!
    weight          : Int
    nodes           : [ EdgeNode ]      @connection (keyName: "EdgeNodes_by_edge", fields: ["id"])
}

# EdgeNodes insertion order is important [ from, to ] = direction of relationship/type
# creation of these needs to be done deliberately in order (use spool)
type EdgeNode
    @auth (rules: [
        { allow: owner                                                                       },
        { allow: groups, operations: [ read, update, delete ], groups: ["Admins", "Editors"] },
        { allow: groups, operations: [ read                 ], groups: ["Viewers"]           },
        { allow: public, operations: [ read                 ]                                }
    ])
    @model (queries: null)
    @key ( name: "EdgeNodes_by_edge", fields: ["edge_id", "node_id"] )
    @key ( name: "EdgeNodes_by_node", fields: ["node_id", "edge_id"] ) 
{
    id              : ID!
    edge_id         : ID!
    node_id         : ID!
    edge            : Edge!             @connection (fields: ["edge_id"])
    node            : Node!             @connection (fields: ["node_id"])
}