## [Start] Set query expression for key **
#set( $modelQueryExpression = {} )
## [Start] Validate key arguments. **
#if( !$util.isNull($ctx.args.statusCreatedAt) && $util.isNullOrBlank($ctx.args.owner) )
  $util.error("When providing argument 'statusCreatedAt' you must also provide 'owner'.", "InvalidArgumentsError")
#end
#if( !$util.isNull($ctx.args.statusCreatedAt) )
  #set( $sortKeyArgumentOperations = $ctx.args.statusCreatedAt.keySet() )
  #if( $sortKeyArgumentOperations.size() > 1 )
    $util.error("Argument statusCreatedAt must specify at most one key condition operation.", "InvalidArgumentsError")
  #end
  #foreach( $operation in $sortKeyArgumentOperations )
    #if( $operation == "between" )
      #if( $ctx.args.statusCreatedAt.between.size() != 2 )
        $util.error("Argument 'statusCreatedAt.between' expects exactly two elements.", "InvalidArgumentsError")
      #end
      #if( !$util.isNullOrBlank($ctx.args.statusCreatedAt.between[0].createdAt) && $util.isNullOrBlank($ctx.args.statusCreatedAt.between[0].status) )
        $util.error("When providing argument 'statusCreatedAt.between[0].createdAt' you must also provide 'statusCreatedAt.between[0].status'.", "InvalidArgumentsError")
      #end
      #if( !$util.isNullOrBlank($ctx.args.statusCreatedAt.between[1].createdAt) && $util.isNullOrBlank($ctx.args.statusCreatedAt.between[1].status) )
        $util.error("When providing argument 'statusCreatedAt.between[1].createdAt' you must also provide 'statusCreatedAt.between[1].status'.", "InvalidArgumentsError")
      #end
    #else
      #if( !$util.isNullOrBlank($ctx.args.statusCreatedAt.get("$operation").createdAt) && $util.isNullOrBlank($ctx.args.statusCreatedAt.get("$operation").status) )
        $util.error("When providing argument 'statusCreatedAt.$operation.createdAt' you must also provide 'statusCreatedAt.$operation.status'.", "InvalidArgumentsError")
      #end
    #end
  #end
#end
## [End] Validate key arguments. **
#if( !$util.isNull($ctx.args.owner) )
  #set( $modelQueryExpression.expression = "#owner = :owner" )
  #set( $modelQueryExpression.expressionNames = {
  "#owner": "owner"
} )
  #set( $modelQueryExpression.expressionValues = {
  ":owner": {
      "S": "$ctx.args.owner"
  }
} )
#end
## [Start] Applying Key Condition **
#set( $sortKeyValue = "" )
#set( $sortKeyValue2 = "" )
#if( !$util.isNull($ctx.args.statusCreatedAt) && !$util.isNull($ctx.args.statusCreatedAt.beginsWith) )
#if( !$util.isNull($ctx.args.statusCreatedAt.beginsWith.status) ) #set( $sortKeyValue = "$ctx.args.statusCreatedAt.beginsWith.status" ) #end
#if( !$util.isNull($ctx.args.statusCreatedAt.beginsWith.createdAt) ) #set( $sortKeyValue = "$sortKeyValue#$ctx.args.statusCreatedAt.beginsWith.createdAt" ) #end
  #set( $modelQueryExpression.expression = "$modelQueryExpression.expression AND begins_with(#sortKey, :sortKey)" )
  $util.qr($modelQueryExpression.expressionNames.put("#sortKey", "status#createdAt"))
  $util.qr($modelQueryExpression.expressionValues.put(":sortKey", { "S": "$sortKeyValue" }))
#end
#if( !$util.isNull($ctx.args.statusCreatedAt) && !$util.isNull($ctx.args.statusCreatedAt.between) )
  #if( $ctx.args.statusCreatedAt.between.size() != 2 )
    $util.error("Argument statusCreatedAt.between expects exactly 2 elements.")
  #end
#if( !$util.isNull($ctx.args.statusCreatedAt.between[0].status) ) #set( $sortKeyValue = "$ctx.args.statusCreatedAt.between[0].status" ) #end
#if( !$util.isNull($ctx.args.statusCreatedAt.between[0].createdAt) ) #set( $sortKeyValue = "$sortKeyValue#$ctx.args.statusCreatedAt.between[0].createdAt" ) #end
#if( !$util.isNull($ctx.args.statusCreatedAt.between[1].status) ) #set( $sortKeyValue2 = "$ctx.args.statusCreatedAt.between[1].status" ) #end
#if( !$util.isNull($ctx.args.statusCreatedAt.between[1].createdAt) ) #set( $sortKeyValue2 = "$sortKeyValue2#$ctx.args.statusCreatedAt.between[1].createdAt" ) #end
  #set( $modelQueryExpression.expression = "$modelQueryExpression.expression AND #sortKey BETWEEN :sortKey0 AND :sortKey1" )
  $util.qr($modelQueryExpression.expressionNames.put("#sortKey", "status#createdAt"))
  $util.qr($modelQueryExpression.expressionValues.put(":sortKey0", { "S": "$sortKeyValue" }))
  $util.qr($modelQueryExpression.expressionValues.put(":sortKey1", { "S": "$sortKeyValue2" }))
#end
#if( !$util.isNull($ctx.args.statusCreatedAt) && !$util.isNull($ctx.args.statusCreatedAt.eq) )
#if( !$util.isNull($ctx.args.statusCreatedAt.eq.status) ) #set( $sortKeyValue = "$ctx.args.statusCreatedAt.eq.status" ) #end
#if( !$util.isNull($ctx.args.statusCreatedAt.eq.createdAt) ) #set( $sortKeyValue = "$sortKeyValue#$ctx.args.statusCreatedAt.eq.createdAt" ) #end
  #set( $modelQueryExpression.expression = "$modelQueryExpression.expression AND #sortKey = :sortKey" )
  $util.qr($modelQueryExpression.expressionNames.put("#sortKey", "status#createdAt"))
  $util.qr($modelQueryExpression.expressionValues.put(":sortKey", { "S": "$sortKeyValue" }))
#end
#if( !$util.isNull($ctx.args.statusCreatedAt) && !$util.isNull($ctx.args.statusCreatedAt.lt) )
#if( !$util.isNull($ctx.args.statusCreatedAt.lt.status) ) #set( $sortKeyValue = "$ctx.args.statusCreatedAt.lt.status" ) #end
#if( !$util.isNull($ctx.args.statusCreatedAt.lt.createdAt) ) #set( $sortKeyValue = "$sortKeyValue#$ctx.args.statusCreatedAt.lt.createdAt" ) #end
  #set( $modelQueryExpression.expression = "$modelQueryExpression.expression AND #sortKey < :sortKey" )
  $util.qr($modelQueryExpression.expressionNames.put("#sortKey", "status#createdAt"))
  $util.qr($modelQueryExpression.expressionValues.put(":sortKey", { "S": "$sortKeyValue" }))
#end
#if( !$util.isNull($ctx.args.statusCreatedAt) && !$util.isNull($ctx.args.statusCreatedAt.le) )
#if( !$util.isNull($ctx.args.statusCreatedAt.le.status) ) #set( $sortKeyValue = "$ctx.args.statusCreatedAt.le.status" ) #end
#if( !$util.isNull($ctx.args.statusCreatedAt.le.createdAt) ) #set( $sortKeyValue = "$sortKeyValue#$ctx.args.statusCreatedAt.le.createdAt" ) #end
  #set( $modelQueryExpression.expression = "$modelQueryExpression.expression AND #sortKey <= :sortKey" )
  $util.qr($modelQueryExpression.expressionNames.put("#sortKey", "status#createdAt"))
  $util.qr($modelQueryExpression.expressionValues.put(":sortKey", { "S": "$sortKeyValue" }))
#end
#if( !$util.isNull($ctx.args.statusCreatedAt) && !$util.isNull($ctx.args.statusCreatedAt.gt) )
#if( !$util.isNull($ctx.args.statusCreatedAt.gt.status) ) #set( $sortKeyValue = "$ctx.args.statusCreatedAt.gt.status" ) #end
#if( !$util.isNull($ctx.args.statusCreatedAt.gt.createdAt) ) #set( $sortKeyValue = "$sortKeyValue#$ctx.args.statusCreatedAt.gt.createdAt" ) #end
  #set( $modelQueryExpression.expression = "$modelQueryExpression.expression AND #sortKey > :sortKey" )
  $util.qr($modelQueryExpression.expressionNames.put("#sortKey", "status#createdAt"))
  $util.qr($modelQueryExpression.expressionValues.put(":sortKey", { "S": "$sortKeyValue" }))
#end
#if( !$util.isNull($ctx.args.statusCreatedAt) && !$util.isNull($ctx.args.statusCreatedAt.ge) )
#if( !$util.isNull($ctx.args.statusCreatedAt.ge.status) ) #set( $sortKeyValue = "$ctx.args.statusCreatedAt.ge.status" ) #end
#if( !$util.isNull($ctx.args.statusCreatedAt.ge.createdAt) ) #set( $sortKeyValue = "$sortKeyValue#$ctx.args.statusCreatedAt.ge.createdAt" ) #end
  #set( $modelQueryExpression.expression = "$modelQueryExpression.expression AND #sortKey >= :sortKey" )
  $util.qr($modelQueryExpression.expressionNames.put("#sortKey", "status#createdAt"))
  $util.qr($modelQueryExpression.expressionValues.put(":sortKey", { "S": "$sortKeyValue" }))
#end


## [End] Applying Key Condition **
## [End] Set query expression for key **
#set( $limit = $util.defaultIfNull($context.args.limit, 100) )
#set( $QueryRequest = {
  "version": "2018-05-29",
  "operation": "Query",
  "limit": $limit,
  "query": $modelQueryExpression,
  "index": "Nodes_by_owner_status_createdAt"
} )
#if( !$util.isNull($ctx.args.sortDirection)
                      && $ctx.args.sortDirection == "DESC" )
  #set( $QueryRequest.scanIndexForward = false )
#else
  #set( $QueryRequest.scanIndexForward = true )
#end
#if( $context.args.nextToken ) #set( $QueryRequest.nextToken = $context.args.nextToken ) #end
#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
  #set( $filter = $ctx.stash.authFilter )
  #if( !$util.isNullOrEmpty($ctx.args.filter) )
    #set( $filter = {
  "and":   [$filter, $ctx.args.filter]
} )
  #end
#else
  #if( !$util.isNullOrEmpty($ctx.args.filter) )
    #set( $filter = $ctx.args.filter )
  #end
#end
#if( !$util.isNullOrEmpty($filter) )
  #set( $filterExpression = $util.parseJson($util.transform.toDynamoDBFilterExpression($filter)) )
  #if( !$util.isNullOrBlank($filterExpression.expression) )
    #if( $filterExpression.expressionValues.size() == 0 )
      $util.qr($filterExpression.remove("expressionValues"))
    #end
    #set( $QueryRequest.filter = $filterExpression )
  #end
#end
$util.toJson($QueryRequest)